{
	"info": {
		"_postman_id": "9ad0ecef-6827-4cf5-a3a8-13a5bf03d29d",
		"name": "eventos-culturales",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "15282761",
		"_collection_link": "https://lively-satellite-388548.postman.co/workspace/Slang~393812e0-e4d3-453c-ac1c-8ac90f2ccd21/collection/15282761-9ad0ecef-6827-4cf5-a3a8-13a5bf03d29d?action=share&source=collection_link&creator=15282761"
	},
	"item": [
		{
			"name": "estudiante",
			"item": [
				{
					"name": "Get estudiante by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {",
									"    pm.expect(pm.response.code).to.equal(404);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - message, error, and statusCode\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('message');",
									"    pm.expect(responseData).to.have.property('error');",
									"    pm.expect(responseData).to.have.property('statusCode');",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Error is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error should be a non-empty string\");",
									"});",
									"",
									"",
									"pm.test(\"Status code is a valid integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.statusCode).to.be.a('number');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://127.0.0.1:3000/estudiante/1",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "3000",
							"path": [
								"estudiante",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create estudiante",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 409\", function () {",
									"  pm.expect(pm.response.code).to.equal(409);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - message, error, and statusCode\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.exist;",
									"    pm.expect(responseData.error).to.exist;",
									"    pm.expect(responseData.statusCode).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Error is in a valid format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.error).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
									"    pm.expect(responseData.statusCode).to.exist.and.to.be.a('number');",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"cedula\": 1218713597,\n    \"nombre\" : \"andres ortiz\",\n    \"correo\": \"andyortiz@gmail.com\",\n    \"programa\": \"ISIS\",\n    \"semestre\": 6\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:3000/estudiante",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "3000",
							"path": [
								"estudiante"
							]
						}
					},
					"response": []
				},
				{
					"name": "Inscribir estudiante en actividad Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {",
									"    pm.expect(pm.response.code).to.equal(404);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - message, error, and statusCode\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('message');",
									"    pm.expect(responseData).to.have.property('error');",
									"    pm.expect(responseData).to.have.property('statusCode');",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Error is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error should not be empty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"cedula\": 1218713597,\n    \"nombre\" : \"andres ortiz\",\n    \"correo\": \"andyortiz@gmail.com\",\n    \"programa\": \"ISIS\",\n    \"semestre\": 6\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:3000/estudiante/inscribirse/6/actividad/1",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "3000",
							"path": [
								"estudiante",
								"inscribirse",
								"6",
								"actividad",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "actividades",
			"item": [
				{
					"name": "Get actividades on date",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(item) {",
									"        pm.expect(item).to.have.property('id');",
									"        pm.expect(item).to.have.property('titulo');",
									"        pm.expect(item).to.have.property('fecha');",
									"        pm.expect(item).to.have.property('cupoMaximo');",
									"        pm.expect(item).to.have.property('estado');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Fecha is in a valid date format\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  responseData.forEach(function(item) {",
									"    pm.expect(item.fecha).to.match(/^\\d{2}-\\d{2}-\\d{4}$/);",
									"  });",
									"});",
									"",
									"",
									"pm.test(\"CupoMaximo is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(item) {",
									"        pm.expect(item.cupoMaximo).to.be.a('number');",
									"        pm.expect(item.cupoMaximo).to.be.at.least(0, \"CupoMaximo should be a non-negative integer\");",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Estado field is within the expected range\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  responseData.forEach(function(activity) {",
									"    pm.expect(activity.estado).to.be.within(0, 1);",
									"  });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://127.0.0.1:3000/actividad/20-05-2025",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "3000",
							"path": [
								"actividad",
								"20-05-2025"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create actividad",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('titulo');",
									"    pm.expect(responseData).to.have.property('fecha');",
									"    pm.expect(responseData).to.have.property('cupoMaximo');",
									"    pm.expect(responseData).to.have.property('estado');",
									"});",
									"",
									"",
									"pm.test(\"Id is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.be.a('number').and.to.be.at.least(0, \"Id should be a non-negative integer\");",
									"});",
									"",
									"",
									"pm.test(\"Fecha is in a valid date format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.fecha).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"});",
									"",
									"",
									"pm.test(\"CupoMaximo is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.cupoMaximo).to.be.a('number');",
									"    pm.expect(responseData.cupoMaximo).to.be.at.least(0, \"CupoMaximo should be a non-negative integer\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"titulo\": \"Actividad #1 Prueba\",\n    \"fecha\" : \"20-05-2025\",\n    \"cupoMaximo\": 5\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:3000/actividad",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "3000",
							"path": [
								"actividad"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cambiar estado",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"",
									"pm.test(\"Id should be a non-negative integer\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.id).to.be.a('number');",
									"  pm.expect(responseData.id).to.be.at.least(0, \"Id should be a non-negative integer\");",
									"});",
									"",
									"",
									"pm.test(\"Validate the 'titulo' is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.titulo).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Estudiantes array is present and contains expected number of elements\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.estudiantes).to.exist.and.to.be.an('array');",
									"    pm.expect(responseData.estudiantes).to.have.lengthOf(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:3000/actividad/6/estado/2",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "3000",
							"path": [
								"actividad",
								"6",
								"estado",
								"2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "resenas",
			"item": [
				{
					"name": "Create resena",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 500\", function () {",
									"    pm.expect(pm.response.code).to.equal(500);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - statusCode and message\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('statusCode');",
									"    pm.expect(responseData).to.have.property('message');",
									"});",
									"",
									"",
									"pm.test(\"StatusCode is a non-empty integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.statusCode).to.exist.and.to.be.a('number');",
									"});",
									"",
									"",
									"pm.test(\"Message is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"comentario\": \"Test comment\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:3000/resena/",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "3000",
							"path": [
								"resena",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get resena by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.property('id');",
									"    pm.expect(responseData).to.have.property('comentario');",
									"    pm.expect(responseData).to.have.property('calificacion');",
									"    pm.expect(responseData).to.have.property('fecha');",
									"});",
									"",
									"",
									"pm.test(\"Comentario is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.comentario).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Comentario should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Calificacion is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData.calificacion).to.be.a('number');",
									"    pm.expect(responseData.calificacion).to.be.at.least(0, \"Calificacion should be a non-negative integer\");",
									"});",
									"",
									"",
									"pm.test(\"Fecha is in a valid date format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.fecha).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:3000/resena/4",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "3000",
							"path": [
								"resena",
								"4"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}